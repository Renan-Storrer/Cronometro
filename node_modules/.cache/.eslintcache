[{"/home/renan/Cronometro/cronometro/src/index.js":"1","/home/renan/Cronometro/cronometro/src/App.js":"2","/home/renan/Cronometro/cronometro/src/reportWebVitals.js":"3","/home/renan/Cronometro/cronometro/src/components/counter.js":"4","/home/renan/Cronometro/cronometro/src/components/Footer.js":"5"},{"size":535,"mtime":1668886335907,"results":"6","hashOfConfig":"7"},{"size":2511,"mtime":1669070158059,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1668886335907,"results":"9","hashOfConfig":"7"},{"size":1296,"mtime":1669065200318,"results":"10","hashOfConfig":"7"},{"size":430,"mtime":1669070508151,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1gv9dqe",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/renan/Cronometro/cronometro/src/index.js",[],[],[],"/home/renan/Cronometro/cronometro/src/App.js",["29","30","31"],[],"import React, { useState, useEffect, useRef } from \"react\";\nimport Counter from \"./components/counter\";\nimport myaudio from \"./assets/song.mp3\"\nimport Footer from \"./components/Footer\";\nimport './styles/App.scss';\n\nfunction App() {\n  const getYear = new Date().getFullYear();\n\n  const [countMin, setCountMin] = useState(0);\n  const [countSec, setCountSec] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [control, setControl] = useState(0);\n  const [audio, setAudio] = useState(new Audio(myaudio));\n\n  const minute = useRef();\n  const second = useRef();\n\n  const handleChange = () => {\n    const getMin = minute.current.value;\n    const getSec = second.current.value;\n\n    if (getMin <= 1440 && getMin >= 0) setCountMin(+minute.current.value);\n    else setCountMin(0);\n\n    if (getSec <= 59 && getSec >= 0) setCountSec(+second.current.value);\n    else setCountSec(0);\n\n  }\n\n\n  const handleReset = () => {\n    setCountMin(0);\n    setCountSec(0);\n    setIsRunning(false);\n    setControl(0);\n    audio.pause();\n    audio.currentTime = 0;\n  };\n\n  useEffect(() => {\n    let interval = null;\n\n    if (control === 0 && isRunning) {\n      setControl(1);\n      audio.play();\n      audio.loop = true;\n    }\n\n    if (control === 1 && !isRunning) {\n      setControl(0);\n      audio.play();\n      audio.loop = true;\n    }\n\n    if (isRunning && countMin >= 0 && countSec > 0) {\n      interval = setInterval(() => {\n        setCountSec(() => countSec - 1);\n      }, 1000);\n    } else if (isRunning && countMin > 0 && countSec === 0) {\n      setCountMin(() => countMin - 1);\n      setCountSec(() => 59);\n    } else if (!isRunning && countSec !== 0) {\n      clearInterval(interval);\n      audio.play();\n      audio.loop = true;\n      setControl(0);\n    } else if (isRunning && countMin === 0 && countSec === 0) {\n      setControl(0);\n      clearInterval(interval);\n      audio.pause();\n      audio.currentTime = 0;\n      setIsRunning(false);\n      alert('Seu tempo acabou...');\n    }\n\n    return () => clearInterval(interval);\n  }, [countMin, countSec, isRunning]);\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>STRANGER TIMER</h1>\n      </header>\n      <main>\n        <Counter\n          minute={minute}\n          handleChange={handleChange}\n          countMin={countMin}\n          second={second}\n          countSec={countSec}\n          setIsRunning={setIsRunning}\n          handleReset={handleReset}\n        />\n      </main>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","/home/renan/Cronometro/cronometro/src/reportWebVitals.js",[],[],"/home/renan/Cronometro/cronometro/src/components/counter.js",[],[],"/home/renan/Cronometro/cronometro/src/components/Footer.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":8,"column":9,"nodeType":"34","messageId":"35","endLine":8,"endColumn":16},{"ruleId":"32","severity":1,"message":"36","line":14,"column":17,"nodeType":"34","messageId":"35","endLine":14,"endColumn":25},{"ruleId":"37","severity":1,"message":"38","line":78,"column":6,"nodeType":"39","endLine":78,"endColumn":37,"suggestions":"40"},"no-unused-vars","'getYear' is assigned a value but never used.","Identifier","unusedVar","'setAudio' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'audio' and 'control'. Either include them or remove the dependency array.","ArrayExpression",["41"],{"desc":"42","fix":"43"},"Update the dependencies array to be: [audio, control, countMin, countSec, isRunning]",{"range":"44","text":"45"},[2043,2074],"[audio, control, countMin, countSec, isRunning]"]